<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DevQuiz.Libraries.Core</name>
    </assembly>
    <members>
        <member name="T:DevQuiz.Libraries.Core.Configurations.DbConfiguration">
            <summary>
            Configurations for db connection
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Configurations.DbConfiguration.ConnectionString">
            <summary>
            Db Connection string
            </summary>
        </member>
        <member name="T:DevQuiz.Libraries.Core.Extensions.StringExtensions">
            <summary>
            Extensions for string objects
            </summary>
        </member>
        <member name="M:DevQuiz.Libraries.Core.Extensions.StringExtensions.ToSnakeCase(System.String)">
            <summary>
            Extension method for transforming string in CamelCase to SnakeCase format.
            </summary>
            <param name="input"> Format string. </param>
            <returns> Formatted string. </returns>
        </member>
        <member name="T:DevQuiz.Libraries.Core.IDevQuizUnitOfWork">
            <summary>
            DevQuiz UnitOfWork
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.IDevQuizUnitOfWork.UserRepository">
            <summary>
            User repository
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.IDevQuizUnitOfWork.QuestionRepository">
            <summary>
            Question repository
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.IDevQuizUnitOfWork.CategoryRepository">
            <summary>
            Category repository
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.IDevQuizUnitOfWork.TagRepository">
            <summary>
            Tag repository
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.IDevQuizUnitOfWork.AnswerRepository">
            <summary>
            Answer repository
            </summary>
        </member>
        <member name="T:DevQuiz.Libraries.Core.IDevQuizUserUnitOfWork">
            <summary>
            DevQuiz UnitOfWork
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.IDevQuizUserUnitOfWork.UserRepository">
            <summary>
            User repository
            </summary>
        </member>
        <member name="T:DevQuiz.Libraries.Core.IUnitOfWork">
            <summary>
            Unit of work interface
            </summary>
        </member>
        <member name="M:DevQuiz.Libraries.Core.IUnitOfWork.Commit">
            <summary>
            Save all changes
            </summary>
            <returns>Operation status</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Core.IUnitOfWork.CommitAsync(System.Threading.CancellationToken)">
            <summary>
            Save all changes
            </summary>
            <param name="cancellationToken">Token for cancel operation</param>
            <returns>Operation status</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Core.IUnitOfWork.ClearChangeTracker">
            <summary>
            Clear db context tracker
            <remarks>Need if you don't want Dispose DbContext but want change tracked elements</remarks>
            </summary>
        </member>
        <member name="M:DevQuiz.Libraries.Core.IUnitOfWork.GetBaseRepository``1">
            <summary>
            Get base repository instance
            </summary>
            <typeparam name="TEntity">Type of TEntity</typeparam>
            <returns>Base repository instance</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Core.IUnitOfWork.GetRepository``2">
            <summary>
            Get instance of concrete repository
            </summary>
            <typeparam name="TRepository">Type of repository</typeparam>
            <typeparam name="TEntity">Type of TEntity</typeparam>
            <returns>Concrete repository instance</returns>
        </member>
        <member name="T:DevQuiz.Libraries.Core.Mappers.QuestionMapperProfile">
            <summary>
            Profile class for mapper user models
            </summary>
        </member>
        <member name="M:DevQuiz.Libraries.Core.Mappers.QuestionMapperProfile.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:DevQuiz.Libraries.Core.Mappers.UserMapperProfile">
            <summary>
            Profile class for mapper user models
            </summary>
        </member>
        <member name="M:DevQuiz.Libraries.Core.Mappers.UserMapperProfile.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:DevQuiz.Libraries.Core.Models.Dto.AnswerDto">
            <summary>
            Base answer model
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Dto.AnswerDto.Text">
            <summary>
            Get or set answer text
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Dto.AnswerDto.QuestionId">
            <summary>
            Get or set unique identifier of question
            </summary>
        </member>
        <member name="T:DevQuiz.Libraries.Core.Models.Dto.CategoryDto">
            <summary>
            Base model of question category
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Dto.CategoryDto.Name">
            <summary>
            Get or set category name
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Dto.CategoryDto.Questions">
            <summary>
            Linked questions
            </summary>
        </member>
        <member name="T:DevQuiz.Libraries.Core.Models.Dto.DtoBase`1">
            <summary>
            Base dto model
            </summary>
            <typeparam name="TKey">Type of entry unique identifier </typeparam>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Dto.DtoBase`1.Id">
            <summary>
            Get or set unique identifier of entry
            </summary>
        </member>
        <member name="T:DevQuiz.Libraries.Core.Models.Dto.QuestionDto">
            <summary>
            Base question model
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Dto.QuestionDto.Text">
            <summary>
            Get or set question text
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Dto.QuestionDto.RightAnswerId">
            <summary>
            Get or set unique identifier right answer
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Dto.QuestionDto.RightAnswerExplanation">
            <summary>
            Get or set right answer explanation
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Dto.QuestionDto.CategoryId">
            <summary>
            Get or set unique identifier of category
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Dto.QuestionDto.Answers">
            <summary>
            Get or set list of answers
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Dto.QuestionDto.Category">
            <summary>
            Category object
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Dto.QuestionDto.Tags">
            <summary>
            Get or set tags list
            </summary>
        </member>
        <member name="T:DevQuiz.Libraries.Core.Models.Dto.TagDto">
            <summary>
            Base model of question tag
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Dto.TagDto.Name">
            <summary>
            Get or set tag name
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Dto.TagDto.Questions">
            <summary>
            Get or set questions list
            </summary>
        </member>
        <member name="T:DevQuiz.Libraries.Core.Models.Dto.UserDto">
            <summary>
            User dto model
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Dto.UserDto.UserName">
            <summary>
            Get or set user name (login)
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Dto.UserDto.FirstName">
            <summary>
            Get or set user first name
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Dto.UserDto.LastName">
            <summary>
            Get or set user last name
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Dto.UserDto.TelegramChatId">
            <summary>
            Unique identifier of telegram chat for current user
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Dto.UserDto.TelegramId">
            <summary>
            Unique identifier of user in Telegram
            </summary>
        </member>
        <member name="T:DevQuiz.Libraries.Core.Models.Entities.AggregateEntity`1">
            <summary>
            Base model for aggregated entities
            </summary>
            <typeparam name="TKey">Type of entity unique index </typeparam>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Entities.AggregateEntity`1.CreatedDate">
            <inheritdoc cref="P:DevQuiz.Libraries.Core.Models.Entities.IAuditEntity.CreatedDate" />
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Entities.AggregateEntity`1.CreatedBy">
            <inheritdoc cref="P:DevQuiz.Libraries.Core.Models.Entities.IAuditEntity.CreatedBy" />
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Entities.AggregateEntity`1.UpdatedDate">
            <inheritdoc cref="P:DevQuiz.Libraries.Core.Models.Entities.IAuditEntity.UpdatedDate" />
        </member>
        <member name="T:DevQuiz.Libraries.Core.Models.Entities.Answer">
            <summary>
            Base answer model
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Entities.Answer.Text">
            <summary>
            Get or set answer text
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Entities.Answer.QuestionId">
            <summary>
            Get or set unique identifier of question
            </summary>
        </member>
        <member name="T:DevQuiz.Libraries.Core.Models.Entities.Category">
            <summary>
            Base model of question category
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Entities.Category.Name">
            <summary>
            Get or set category name
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Entities.Category.Questions">
            <summary>
            Linked questions
            </summary>
        </member>
        <member name="T:DevQuiz.Libraries.Core.Models.Entities.EntityBase`1">
            <summary>
            Base entity class
            </summary>
            <typeparam name="TKey">Type of unique identifier</typeparam>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Entities.EntityBase`1.Id">
            <summary>
            Get or set unique identifier of entity
            </summary>
        </member>
        <member name="T:DevQuiz.Libraries.Core.Models.Entities.IAuditEntity">
            <summary>
            Interface for models which need audit information
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Entities.IAuditEntity.CreatedDate">
            <summary>
            Created Date
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Entities.IAuditEntity.CreatedBy">
            <summary>
            Who create entity
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Entities.IAuditEntity.UpdatedDate">
            <summary>
            Update Date
            </summary>
        </member>
        <member name="T:DevQuiz.Libraries.Core.Models.Entities.Question">
            <summary>
            Base question model
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Entities.Question.Text">
            <summary>
            Get or set question text
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Entities.Question.RightAnswerId">
            <summary>
            Get or set unique identifier right answer
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Entities.Question.RightAnswerExplanation">
            <summary>
            Get or set right answer explanation
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Entities.Question.CategoryId">
            <summary>
            Get or set unique identifier of category
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Entities.Question.Answers">
            <summary>
            Get or set list of answers
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Entities.Question.Category">
            <summary>
            Category object
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Entities.Question.Tags">
            <summary>
            Get or set tags list
            </summary>
        </member>
        <member name="T:DevQuiz.Libraries.Core.Models.Entities.Tag">
            <summary>
            Base model of question tag
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Entities.Tag.Name">
            <summary>
            Get or set tag name
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Entities.Tag.Questions">
            <summary>
            Get or set questions list
            </summary>
        </member>
        <member name="T:DevQuiz.Libraries.Core.Models.Entities.User">
            <summary>
            Base UserModel
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Entities.User.UserName">
            <summary>
            Get or set user name (login)
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Entities.User.FirstName">
            <summary>
            Get or set user first name
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Entities.User.LastName">
            <summary>
            Get or set user last name
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Entities.User.TelegramChatId">
            <summary>
            Unique identifier of telegram chat for current user
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.Entities.User.TelegramId">
            <summary>
            Unique identifier of user in Telegram
            </summary>
        </member>
        <member name="T:DevQuiz.Libraries.Core.Models.IHasKey`1">
            <summary>
            Generic interface for entries which has a unique key
            </summary>
            <typeparam name="TKey">Unique key type</typeparam>
        </member>
        <member name="P:DevQuiz.Libraries.Core.Models.IHasKey`1.Id">
            <summary>
            Unique key
            </summary>
        </member>
        <member name="T:DevQuiz.Libraries.Core.Repositories.IGenericRepository`1">
            <summary>
            Generic repository
            </summary>
            <typeparam name="TEntity">Type of entity</typeparam>
        </member>
        <member name="M:DevQuiz.Libraries.Core.Repositories.IGenericRepository`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get all entities with filter order and paging and included tables
            </summary>
            <param name="predicate">Filter for entities</param>
            <param name="include">Tables to include</param>
            <param name="orderBy">Order by function</param>
            <param name="skip">Number of skip entities</param>
            <param name="take">Number of take entities</param>
            <returns>IQueryable collection of entities</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Core.Repositories.IGenericRepository`1.List(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get all entities with filter order and paging and included tables
            </summary>
            <param name="predicate">Filter for entities</param>
            <param name="include">Tables to include</param>
            <param name="orderBy">Order by function</param>
            <param name="skip">Number of skip entities</param>
            <param name="take">Number of take entities</param>
            <returns>List of entities</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Core.Repositories.IGenericRepository`1.ListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get all entities with filter order and paging and included tables
            </summary>
            <param name="predicate">Filter for entities</param>
            <param name="include">Tables to include</param>
            <param name="orderBy">Order by function</param>
            <param name="skip">Number of skip entities</param>
            <param name="take">Number of take entities</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of entities</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Core.Repositories.IGenericRepository`1.GetOne(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}})">
            <summary>
            Get one entity
            </summary>
            <param name="predicate">Filter for entities</param>
            <param name="include">Tables to include</param>
            <returns>One entity</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Core.Repositories.IGenericRepository`1.GetOneAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}},System.Threading.CancellationToken)">
            <summary>
            Get one entity
            </summary>
            <param name="predicate">Filter for entities</param>
            <param name="include">Tables to include</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>One entity</returns>
        </member>
        <member name="T:DevQuiz.Libraries.Core.Repositories.IGenericRepositoryBase`1">
            <summary>
            Base generic repository interface
            </summary>
            <typeparam name="TEntity">Type of entity</typeparam>
        </member>
        <member name="M:DevQuiz.Libraries.Core.Repositories.IGenericRepositoryBase`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Get all entities with filter
            </summary>
            <param name="predicate">Filter for entities</param>
            <returns>IQueryable collection of entities</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Core.Repositories.IGenericRepositoryBase`1.List(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Get list entities by passed expression
            </summary>
            <param name="predicate">Filter for entities</param>
            <returns>List collection of entities</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Core.Repositories.IGenericRepositoryBase`1.ListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Get list entities by passed expression
            </summary>
            <param name="predicate">Filter for entities</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List collection of entities</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Core.Repositories.IGenericRepositoryBase`1.Count">
            <summary>
            Count of entities
            </summary>
            <returns>Number of entities in db</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Core.Repositories.IGenericRepositoryBase`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Count of entities with filter
            </summary>
            <param name="predicate">Filter for entities</param>
            <returns>Number of entities in db</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Core.Repositories.IGenericRepositoryBase`1.Create(`0)">
            <summary>
            Create new entity
            </summary>
            <param name="entityToAdd">Entity to add model</param>
        </member>
        <member name="M:DevQuiz.Libraries.Core.Repositories.IGenericRepositoryBase`1.CreateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Create new entity
            </summary>
            <param name="entityToAdd">Entity model</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:DevQuiz.Libraries.Core.Repositories.IGenericRepositoryBase`1.Update(`0)">
            <summary>
            Update entity information
            </summary>
            <param name="entityToUpdate">Entity information</param>
        </member>
        <member name="M:DevQuiz.Libraries.Core.Repositories.IGenericRepositoryBase`1.Delete(`0)">
            <summary>
            Delete entity from the store
            </summary>
            <param name="entityToDelete">Entity instance</param>
        </member>
        <member name="M:DevQuiz.Libraries.Core.Repositories.IGenericRepositoryBase`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Delete entity from the store
            </summary>
            <param name="predicate">Searching function</param>
        </member>
        <member name="M:DevQuiz.Libraries.Core.Repositories.IGenericRepositoryBase`1.GetOne(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Get one entity
            </summary>
            <param name="predicate">Filter for entities</param>
            <returns>One entity</returns>
        </member>
        <member name="T:DevQuiz.Libraries.Core.Services.IBaseService`7">
            <summary>
            Base service for manage entries
            </summary>
            <typeparam name="TEntryDto">Entry dto for add or update</typeparam>
            <typeparam name="TKey">Parameter with unique identifier of entry</typeparam>
            <typeparam name="TOneEntryResult">Get one entry result</typeparam>
            <typeparam name="TAllEntriesResult">Get all entries result</typeparam>
            <typeparam name="TCreateEntryResult">Result after create entry</typeparam>
            <typeparam name="TUpdateEntryResult">Result after update entry</typeparam>
            <typeparam name="TDeleteEntryResult">Result after delete entry</typeparam>
        </member>
        <member name="M:DevQuiz.Libraries.Core.Services.IBaseService`7.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Get all entries
            </summary>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>All entries result</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Core.Services.IBaseService`7.GetByIdAsync(`6,System.Threading.CancellationToken)">
            <summary>
            Get one entry
            </summary>
            <param name="idDto">Parameter with unique identifier</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>One entry result</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Core.Services.IBaseService`7.CreateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Create new entry
            </summary>
            <param name="entryToAdd">Model with information about new entry</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>New entry information</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Core.Services.IBaseService`7.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Update entry
            </summary>
            <param name="entryToUpdate">Model with information to update</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Update entry information</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Core.Services.IBaseService`7.DeleteAsync(`6,System.Threading.CancellationToken)">
            <summary>
            Delete entry
            </summary>
            <param name="idDto">Parameter with unique identifier</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Method execution status</returns>
        </member>
        <member name="T:DevQuiz.Libraries.Core.Services.IQuestionService">
            <summary>
            Service for manage Question entries
            </summary>
        </member>
        <member name="M:DevQuiz.Libraries.Core.Services.IQuestionService.GetAllCategoriesAsync(System.Boolean)">
            <summary>
            Get all categories
            </summary>
            <param name="includeQuestions">Flag to include questions</param>
            <returns>Categories information collection</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Core.Services.IQuestionService.GetCategoryByIdAsync(System.Int32,System.Boolean)">
            <summary>
            Get question category by id
            </summary>
            <param name="categoryId">Category unique identifier</param>
            <param name="includeQuestions">Flag to include questions</param>
            <returns>Question category information</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Core.Services.IQuestionService.GetCategoryByNameAsync(System.String,System.Boolean)">
            <summary>
            Get category by name
            </summary>
            <param name="categoryName">Category name</param>
            <param name="includeQuestions">Flag to include questions</param>
            <returns>Information about category</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Core.Services.IQuestionService.CreateCategoryAsync(DevQuiz.Libraries.Core.Models.Dto.CategoryDto)">
            <summary>
            Create new category entry
            </summary>
            <param name="categoryToCreate">Category new entry</param>
            <returns>Unique identifier of new category</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Core.Services.IQuestionService.UpdateCategoryAsync(DevQuiz.Libraries.Core.Models.Dto.CategoryDto)">
            <summary>
            Update category information
            </summary>
            <param name="categoryToUpdate">Category to update</param>
            <returns>Method execution status</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Core.Services.IQuestionService.DeleteCategoryAsync(System.Int32)">
            <summary>
            Delete category from store
            </summary>
            <param name="categoryId">Category unique identifier</param>
            <returns>Method execution status</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Core.Services.IQuestionService.GetAllTagsAsync(System.Boolean)">
            <summary>
            Get all tags
            </summary>
            <param name="includeQuestions">Flag to include questions</param>
            <returns>Tag information collection</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Core.Services.IQuestionService.GetTagByIdAsync(System.Int32,System.Boolean)">
            <summary>
            Get tag by id
            </summary>
            <param name="tagId">Unique identifier of tag</param>
            <param name="includeQuestions">Flag to include questions</param>
            <returns>Information about tag</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Core.Services.IQuestionService.GetTagByNameAsync(System.String,System.Boolean)">
            <summary>
            Get tag by name
            </summary>
            <param name="tagName">Name of tag</param>
            <param name="includeQuestions">Flag to include questions</param>
            <returns>Information about tag</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Core.Services.IQuestionService.CreateTagAsync(DevQuiz.Libraries.Core.Models.Dto.TagDto)">
            <summary>
            Create new tag entry
            </summary>
            <param name="tagToCreate">Tag new entry</param>
            <returns>Unique identifier of new tag</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Core.Services.IQuestionService.UpdateTagAsync(DevQuiz.Libraries.Core.Models.Dto.TagDto)">
            <summary>
            Update tag information
            </summary>
            <param name="tagToUpdate">Tag to update</param>
            <returns>Method execution status</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Core.Services.IQuestionService.DeleteTagAsync(System.Int32)">
            <summary>
            Delete tag from store
            </summary>
            <param name="tagId">Unique identifier of tag</param>
            <returns>Method execution status</returns>
        </member>
        <member name="T:DevQuiz.Libraries.Core.Services.IUserService">
            <summary>
            Service for manage users
            </summary>
        </member>
        <member name="M:DevQuiz.Libraries.Core.Services.IUserService.GetByChatIdAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Get user information by chat id
            </summary>
            <param name="telegramChatId">User chat id with current bot</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Information about user</returns>
        </member>
    </members>
</doc>
