<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DevQuiz.Libraries.Services</name>
    </assembly>
    <members>
        <member name="T:DevQuiz.Libraries.Services.BaseHandler`2">
            <summary>
            Base abstract handler
            </summary>
            <typeparam name="TRequest">Type of handler request</typeparam>
            <typeparam name="TResponse">Type of handler response</typeparam>
        </member>
        <member name="P:DevQuiz.Libraries.Services.BaseHandler`2.Logger">
            <summary>
            Logger
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Services.BaseHandler`2.Mapper">
            <summary>
            Mapper object
            </summary>
        </member>
        <member name="M:DevQuiz.Libraries.Services.BaseHandler`2.#ctor(AutoMapper.IMapper,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Base constructor
            </summary>
            <param name="mapper">Instance of type <see cref="T:AutoMapper.IMapper"/></param>
            <param name="logger">Instance of <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/></param>
        </member>
        <member name="M:DevQuiz.Libraries.Services.BaseHandler`2.Handle(`0,System.Threading.CancellationToken)">
            <summary>
            Method for handle command/query
            </summary>
            <param name="request">Request instance</param>
            <param name="cancellationToken">Instance of type <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>Response of executed handler</returns>
        </member>
        <member name="T:DevQuiz.Libraries.Services.BaseHandler`1">
            <summary>
            Base abstract handler
            </summary>
            <typeparam name="TRequest">Type of handler request</typeparam>
        </member>
        <member name="P:DevQuiz.Libraries.Services.BaseHandler`1.Logger">
            <summary>
            Logger
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Services.BaseHandler`1.Mapper">
            <summary>
            Mapper object
            </summary>
        </member>
        <member name="M:DevQuiz.Libraries.Services.BaseHandler`1.#ctor(AutoMapper.IMapper,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Base constructor
            </summary>
            <param name="mapper">Instance of type <see cref="T:AutoMapper.IMapper"/></param>
            <param name="logger">Instance of <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/></param>
        </member>
        <member name="M:DevQuiz.Libraries.Services.BaseHandler`1.Handle(`0,System.Threading.CancellationToken)">
            <summary>
            Method for handle command/query
            </summary>
            <param name="request">Request instance</param>
            <param name="cancellationToken">Instance of type <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>Response of executed handler</returns>
        </member>
        <member name="T:DevQuiz.Libraries.Services.Commands.CreateQuestion.CreateQuestionCommandResponse">
            <summary>
            Create question command response
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Services.Commands.CreateQuestion.CreateQuestionCommandResponse.Id">
            <summary>
            Identifier of new Question
            </summary>
        </member>
        <member name="T:DevQuiz.Libraries.Services.Commands.DeleteQuestionCommand">
            <summary>
            Command for delete question action
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Services.Commands.DeleteQuestionCommand.Id">
            <summary>
            Identifier of deleted question
            </summary>
        </member>
        <member name="T:DevQuiz.Libraries.Services.Commands.UpdateQuestionCommand">
            <summary>
            Command for update question action 
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Services.Commands.UpdateQuestionCommand.Id">
            <summary>
            Identifier of question for update
            </summary>
        </member>
        <member name="T:DevQuiz.Libraries.Services.FakeUserService">
            <inheritdoc cref="T:DevQuiz.Libraries.Core.Services.IUserService"/>
        </member>
        <member name="P:DevQuiz.Libraries.Services.FakeUserService.UserDtoes">
            <summary>
                List of DTO of user.
            </summary>
        </member>
        <member name="M:DevQuiz.Libraries.Services.FakeUserService.GetAllAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Services.IBaseService`7.GetAllAsync(System.Threading.CancellationToken)" />
        </member>
        <member name="M:DevQuiz.Libraries.Services.FakeUserService.GetByIdAsync(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Services.IBaseService`7.GetByIdAsync(`6,System.Threading.CancellationToken)" />
        </member>
        <member name="M:DevQuiz.Libraries.Services.FakeUserService.CreateAsync(DevQuiz.Libraries.Core.Models.Dto.UserDto,System.Threading.CancellationToken)">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Services.IBaseService`7.CreateAsync(`0,System.Threading.CancellationToken)" />
        </member>
        <member name="M:DevQuiz.Libraries.Services.FakeUserService.UpdateAsync(DevQuiz.Libraries.Core.Models.Dto.UserDto,System.Threading.CancellationToken)">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Services.IBaseService`7.UpdateAsync(`0,System.Threading.CancellationToken)" />
        </member>
        <member name="M:DevQuiz.Libraries.Services.FakeUserService.DeleteAsync(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Services.IBaseService`7.DeleteAsync(`6,System.Threading.CancellationToken)" />
        </member>
        <member name="M:DevQuiz.Libraries.Services.FakeUserService.GetByChatIdAsync(System.Int64,System.Threading.CancellationToken)">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Services.IUserService.GetByChatIdAsync(System.Int64,System.Threading.CancellationToken)" />
        </member>
        <member name="T:DevQuiz.Libraries.Services.Handlers.Admin.CreateQuestionCommandHandler">
            <summary>
            Handler for action on create question
            </summary>
        </member>
        <member name="M:DevQuiz.Libraries.Services.Handlers.Admin.CreateQuestionCommandHandler.#ctor(AutoMapper.IMapper,DevQuiz.Libraries.Core.IDevQuizUnitOfWork,Microsoft.Extensions.Logging.ILogger{DevQuiz.Libraries.Services.Handlers.Admin.CreateQuestionCommandHandler})">
            <summary>
            Constructor with parameters
            </summary>
            <param name="mapper">Instance of type <see cref="T:AutoMapper.IMapper"/></param>
            <param name="unitOfWork">Instance of <see cref="T:DevQuiz.Libraries.Core.IDevQuizUnitOfWork"/></param>
            <param name="logger">Instance of <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/></param>
        </member>
        <member name="M:DevQuiz.Libraries.Services.Handlers.Admin.CreateQuestionCommandHandler.Handle(DevQuiz.Libraries.Services.Commands.CreateQuestion.CreateQuestionCommand,System.Threading.CancellationToken)">
            <inheritdoc cref="M:DevQuiz.Libraries.Services.Handlers.Admin.CreateQuestionCommandHandler.Handle(DevQuiz.Libraries.Services.Commands.CreateQuestion.CreateQuestionCommand,System.Threading.CancellationToken)"/> 
        </member>
        <member name="T:DevQuiz.Libraries.Services.Handlers.Admin.DeleteQuestionCommandHandler">
            <summary>
            Handler for delete question action
            </summary>
        </member>
        <member name="M:DevQuiz.Libraries.Services.Handlers.Admin.DeleteQuestionCommandHandler.#ctor(AutoMapper.IMapper,DevQuiz.Libraries.Core.IDevQuizUnitOfWork,Microsoft.Extensions.Logging.ILogger{DevQuiz.Libraries.Services.Handlers.Admin.CreateQuestionCommandHandler})">
            <summary>
            Constructor with params
            </summary>
            <param name="mapper">Instance of type <see cref="T:AutoMapper.IMapper"/></param>
            <param name="unitOfWork">Instance of <see cref="T:DevQuiz.Libraries.Core.IDevQuizUnitOfWork"/></param>
            <param name="logger">Instance of <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/></param>
        </member>
        <member name="M:DevQuiz.Libraries.Services.Handlers.Admin.DeleteQuestionCommandHandler.Handle(DevQuiz.Libraries.Services.Commands.DeleteQuestionCommand,System.Threading.CancellationToken)">
            <inheritdoc cref="M:DevQuiz.Libraries.Services.Handlers.Admin.DeleteQuestionCommandHandler.Handle(DevQuiz.Libraries.Services.Commands.DeleteQuestionCommand,System.Threading.CancellationToken)"/> 
        </member>
        <member name="T:DevQuiz.Libraries.Services.Handlers.Admin.UpdateQuestionCommandHandler">
            <summary>
            Handler for update question action
            </summary>
        </member>
        <member name="M:DevQuiz.Libraries.Services.Handlers.Admin.UpdateQuestionCommandHandler.#ctor(AutoMapper.IMapper,DevQuiz.Libraries.Core.IDevQuizUnitOfWork,Microsoft.Extensions.Logging.ILogger{DevQuiz.Libraries.Services.Handlers.Admin.UpdateQuestionCommandHandler})">
            <summary>
            Constructor with params
            </summary>
            <param name="mapper">Instance of type <see cref="T:AutoMapper.IMapper"/></param>
            <param name="unitOfWork">Instance of <see cref="T:DevQuiz.Libraries.Core.IDevQuizUnitOfWork"/></param>
            <param name="logger">Instance of <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/></param>
        </member>
        <member name="M:DevQuiz.Libraries.Services.Handlers.Admin.UpdateQuestionCommandHandler.Handle(DevQuiz.Libraries.Services.Commands.UpdateQuestionCommand,System.Threading.CancellationToken)">
            <inheritdoc cref="M:DevQuiz.Libraries.Services.Handlers.Admin.UpdateQuestionCommandHandler.Handle(DevQuiz.Libraries.Services.Commands.UpdateQuestionCommand,System.Threading.CancellationToken)"/> 
        </member>
        <member name="T:DevQuiz.Libraries.Services.MapperProfiles.DevQuizBusinessLogicMapperProfile">
            <summary>
            Mapper profile for business logic layer
            </summary>
        </member>
        <member name="M:DevQuiz.Libraries.Services.MapperProfiles.DevQuizBusinessLogicMapperProfile.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:DevQuiz.Libraries.Services.QuestionService">
            <summary>
            Service for manage Question entries
            </summary>
        </member>
        <member name="M:DevQuiz.Libraries.Services.QuestionService.#ctor(DevQuiz.Libraries.Core.IDevQuizUnitOfWork,AutoMapper.IMapper,Microsoft.Extensions.Logging.ILogger{DevQuiz.Libraries.Services.QuestionService})">
            <summary>
            Constructor
            </summary>
            <param name="unitOfWork">Unit of work instance</param>
            <param name="mapper">Mapper instance</param>
            <param name="logger">Logger instance</param>
        </member>
        <member name="M:DevQuiz.Libraries.Services.QuestionService.GetAllAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Services.IBaseService`7.GetAllAsync(System.Threading.CancellationToken)" />
        </member>
        <member name="M:DevQuiz.Libraries.Services.QuestionService.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Services.IBaseService`7.GetByIdAsync(`6,System.Threading.CancellationToken)" />
        </member>
        <member name="M:DevQuiz.Libraries.Services.QuestionService.CreateAsync(DevQuiz.Libraries.Core.Models.Dto.QuestionDto,System.Threading.CancellationToken)">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Services.IBaseService`7.CreateAsync(`0,System.Threading.CancellationToken)" />
        </member>
        <member name="M:DevQuiz.Libraries.Services.QuestionService.UpdateAsync(DevQuiz.Libraries.Core.Models.Dto.QuestionDto,System.Threading.CancellationToken)">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Services.IBaseService`7.UpdateAsync(`0,System.Threading.CancellationToken)" />
        </member>
        <member name="M:DevQuiz.Libraries.Services.QuestionService.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Services.IBaseService`7.DeleteAsync(`6,System.Threading.CancellationToken)" />
        </member>
        <member name="M:DevQuiz.Libraries.Services.QuestionService.GetAllCategoriesAsync(System.Boolean)">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Services.IQuestionService.GetAllCategoriesAsync(System.Boolean)"/>
        </member>
        <member name="M:DevQuiz.Libraries.Services.QuestionService.GetCategoryByIdAsync(System.Int32,System.Boolean)">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Services.IQuestionService.GetCategoryByIdAsync(System.Int32,System.Boolean)"/>
        </member>
        <member name="M:DevQuiz.Libraries.Services.QuestionService.GetCategoryByNameAsync(System.String,System.Boolean)">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Services.IQuestionService.GetCategoryByNameAsync(System.String,System.Boolean)"/>
        </member>
        <member name="M:DevQuiz.Libraries.Services.QuestionService.CreateCategoryAsync(DevQuiz.Libraries.Core.Models.Dto.CategoryDto)">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Services.IQuestionService.CreateCategoryAsync(DevQuiz.Libraries.Core.Models.Dto.CategoryDto)"/>
        </member>
        <member name="M:DevQuiz.Libraries.Services.QuestionService.UpdateCategoryAsync(DevQuiz.Libraries.Core.Models.Dto.CategoryDto)">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Services.IQuestionService.UpdateCategoryAsync(DevQuiz.Libraries.Core.Models.Dto.CategoryDto)"/>
        </member>
        <member name="M:DevQuiz.Libraries.Services.QuestionService.DeleteCategoryAsync(System.Int32)">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Services.IQuestionService.DeleteCategoryAsync(System.Int32)"/>
        </member>
        <member name="M:DevQuiz.Libraries.Services.QuestionService.GetAllTagsAsync(System.Boolean)">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Services.IQuestionService.GetAllTagsAsync(System.Boolean)"/>
        </member>
        <member name="M:DevQuiz.Libraries.Services.QuestionService.GetTagByIdAsync(System.Int32,System.Boolean)">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Services.IQuestionService.GetTagByIdAsync(System.Int32,System.Boolean)"/>
        </member>
        <member name="M:DevQuiz.Libraries.Services.QuestionService.GetTagByNameAsync(System.String,System.Boolean)">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Services.IQuestionService.GetTagByNameAsync(System.String,System.Boolean)"/>
        </member>
        <member name="M:DevQuiz.Libraries.Services.QuestionService.CreateTagAsync(DevQuiz.Libraries.Core.Models.Dto.TagDto)">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Services.IQuestionService.CreateTagAsync(DevQuiz.Libraries.Core.Models.Dto.TagDto)"/>
        </member>
        <member name="M:DevQuiz.Libraries.Services.QuestionService.UpdateTagAsync(DevQuiz.Libraries.Core.Models.Dto.TagDto)">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Services.IQuestionService.UpdateCategoryAsync(DevQuiz.Libraries.Core.Models.Dto.CategoryDto)"/>
        </member>
        <member name="M:DevQuiz.Libraries.Services.QuestionService.DeleteTagAsync(System.Int32)">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Services.IQuestionService.DeleteTagAsync(System.Int32)"/>
        </member>
        <member name="T:DevQuiz.Libraries.Services.UserService">
            <inheritdoc cref="T:DevQuiz.Libraries.Core.Services.IUserService" />
        </member>
        <member name="M:DevQuiz.Libraries.Services.UserService.#ctor(DevQuiz.Libraries.Core.IDevQuizUnitOfWork,AutoMapper.IMapper,Microsoft.Extensions.Logging.ILogger{DevQuiz.Libraries.Services.UserService})">
            <summary>
            Constructor
            </summary>
            <param name="unitOfWork">Instance of UnitOfWork</param>
            <param name="mapper">Mapper instance</param>
            <param name="logger">Logger instance</param>
        </member>
        <member name="M:DevQuiz.Libraries.Services.UserService.GetAllAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Services.IBaseService`7.GetAllAsync(System.Threading.CancellationToken)" />
        </member>
        <member name="M:DevQuiz.Libraries.Services.UserService.GetByIdAsync(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Services.IBaseService`7.GetByIdAsync(`6,System.Threading.CancellationToken)" />
        </member>
        <member name="M:DevQuiz.Libraries.Services.UserService.CreateAsync(DevQuiz.Libraries.Core.Models.Dto.UserDto,System.Threading.CancellationToken)">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Services.IBaseService`7.CreateAsync(`0,System.Threading.CancellationToken)" />
        </member>
        <member name="M:DevQuiz.Libraries.Services.UserService.DeleteAsync(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Services.IBaseService`7.DeleteAsync(`6,System.Threading.CancellationToken)" />
        </member>
        <member name="M:DevQuiz.Libraries.Services.UserService.UpdateAsync(DevQuiz.Libraries.Core.Models.Dto.UserDto,System.Threading.CancellationToken)">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Services.IBaseService`7.UpdateAsync(`0,System.Threading.CancellationToken)" />
        </member>
        <member name="M:DevQuiz.Libraries.Services.UserService.GetByChatIdAsync(System.Int64,System.Threading.CancellationToken)">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Services.IUserService.GetByChatIdAsync(System.Int64,System.Threading.CancellationToken)" />
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions">
            <summary>
            Extensions methods for IServiceCollection instance
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddDevQuizServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add services for working with DevQuiz db
            </summary>
            <param name="services">IServiceCollection instance</param>
            <returns>IServiceCollection</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddDevQuizMediatrServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Register Handlers for commands that contains in Business logic layer
            </summary>
            <param name="services"></param>
            <param name="additionalMediatrAssemblies"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddDevQuizMapperServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Register AutoMapping services for DevQuiz 
            </summary>
            <param name="services">Instance of <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <returns>Original instance of <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></returns>
        </member>
    </members>
</doc>
