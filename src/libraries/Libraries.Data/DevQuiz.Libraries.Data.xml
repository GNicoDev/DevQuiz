<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DevQuiz.Libraries.Data</name>
    </assembly>
    <members>
        <member name="T:DevQuiz.Libraries.Data.DbContexts.DevQuizDbContext">
            <summary>
            Db context for connecting DevQuiz data
            </summary>
        </member>
        <member name="M:DevQuiz.Libraries.Data.DbContexts.DevQuizDbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{DevQuiz.Libraries.Data.DbContexts.DevQuizDbContext})">
            <summary>
            Constructor
            </summary>
            <param name="options">Options for creating DevQuiz context</param>
        </member>
        <member name="P:DevQuiz.Libraries.Data.DbContexts.DevQuizDbContext.Users">
            <summary>
            DevQuiz Users
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Data.DbContexts.DevQuizDbContext.Questions">
            <summary>
            DevQuiz Questions
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Data.DbContexts.DevQuizDbContext.Categories">
            <summary>
            DevQuiz Categories
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Data.DbContexts.DevQuizDbContext.Tags">
            <summary>
            DevQuiz Tags
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Data.DbContexts.DevQuizDbContext.Answers">
            <summary>
            DevQuiz Answers
            </summary>
        </member>
        <member name="M:DevQuiz.Libraries.Data.DbContexts.DevQuizDbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Method executing while models creating
            </summary>
            <param name="modelBuilder">Model builder</param>
        </member>
        <member name="T:DevQuiz.Libraries.Data.DbContexts.Factories.DesignTimeDbContextFactory`1">
            <summary>
            Custom db context abstract factory
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="M:DevQuiz.Libraries.Data.DbContexts.Factories.DesignTimeDbContextFactory`1.CreateDbContext(System.String[])">
            <summary>
            Создать объект БД
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:DevQuiz.Libraries.Data.DbContexts.Factories.DesignTimeDbContextFactory`1.CreateNewInstance(Microsoft.EntityFrameworkCore.DbContextOptions{`0})">
            <summary>
            Создание нового объекта
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:DevQuiz.Libraries.Data.DbContexts.Factories.DesignTimeDbContextFactory`1.Create">
            <summary>
            Создание объекта фабрики
            </summary>
            <returns></returns>
        </member>
        <member name="T:DevQuiz.Libraries.Data.DbContexts.Factories.DevQuizDesignTimeDbContextFactory">
            <summary>
            DevQuiz db context factory
            </summary>
        </member>
        <member name="M:DevQuiz.Libraries.Data.DbContexts.Factories.DevQuizDesignTimeDbContextFactory.CreateNewInstance(Microsoft.EntityFrameworkCore.DbContextOptions{DevQuiz.Libraries.Data.DbContexts.DevQuizDbContext})">
            <summary>
            Creating new object
            </summary>
            <param name="options">Db context options</param>
            <returns>Db context instance</returns>
        </member>
        <member name="T:DevQuiz.Libraries.Data.Extensions.ServiceCollectionExtensions">
            <summary>
            Extensions for IServiceCollection instance
            </summary>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Extensions.ServiceCollectionExtensions.AddDevQuizDbContexts(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Register DbContexts for DevQuiz
            </summary>
            <param name="services">IServiceCollection instance</param>
            <param name="configuration">IConfiguration instance</param>
            <returns>IServiceCollection</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Extensions.ServiceCollectionExtensions.AddDevQuizRepositories``6(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Register Repositories for DevQuiz
            </summary>
            <param name="services">IServiceCollection instance</param>
            <returns>IServiceCollection</returns>
        </member>
        <member name="T:DevQuiz.Libraries.Data.Models.Answer">
            <summary>
            Answer model
            </summary>
        </member>
        <member name="T:DevQuiz.Libraries.Data.Models.Category">
            <summary>
            Model of question category
            </summary>
        </member>
        <member name="T:DevQuiz.Libraries.Data.Models.Question">
            <summary>
            Question model
            </summary>
        </member>
        <member name="T:DevQuiz.Libraries.Data.Models.Tag">
            <summary>
            Model of question tag
            </summary>
        </member>
        <member name="T:DevQuiz.Libraries.Data.Models.User">
            <summary>
            User db model
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Data.Models.User.TelegramId">
            <summary>
            Unique identifier of user in Telegram
            </summary>
        </member>
        <member name="T:DevQuiz.Libraries.Data.Repositories.GenericRepository`2">
            <summary>
            Base repository class
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Data.Repositories.GenericRepository`2.DbSet">
            <summary>
            DbSet for current type of TEntity
            </summary>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.GenericRepository`2.#ctor(`0,Microsoft.Extensions.Logging.ILogger{DevQuiz.Libraries.Data.Repositories.GenericRepository{`0,`1}})">
            <summary>
            Constructor
            </summary>
            <param name="genericDbContext">Generic db context</param>
            <param name="logger">Logger instance</param>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.GenericRepository`2.GetAll">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Repositories.IGenericRepositoryBase`1.GetAll"/>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.GenericRepository`2.GetAll(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Repositories.IGenericRepositoryBase`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})"/>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.GenericRepository`2.GetAll(System.Func{System.Linq.IQueryable{`1},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`1,System.Object}})">
            <inheritdoc cref="M:DevQuiz.Libraries.Data.Repositories.IGenericRepository`1.GetAll(System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}})"/>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.GenericRepository`2.GetAll(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Func{System.Linq.IQueryable{`1},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`1,System.Object}})">
            <inheritdoc cref="M:DevQuiz.Libraries.Data.Repositories.IGenericRepository`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}})"/>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.GenericRepository`2.GetAll(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Func{System.Linq.IQueryable{`1},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`1,System.Object}},System.Func{System.Linq.IQueryable{`1},System.Linq.IOrderedQueryable{`1}},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc cref="M:DevQuiz.Libraries.Data.Repositories.IGenericRepository`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Nullable{System.Int32},System.Nullable{System.Int32})"/>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.GenericRepository`2.GetAll(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Func{System.Linq.IQueryable{`1},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`1,System.Object}},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc cref="M:DevQuiz.Libraries.Data.Repositories.IGenericRepository`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})"/>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.GenericRepository`2.GetAllAsync">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Repositories.IGenericRepositoryBase`1.GetAllAsync"/>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.GenericRepository`2.GetAllAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Repositories.IGenericRepositoryBase`1.GetAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})"/>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.GenericRepository`2.GetAllAsync(System.Func{System.Linq.IQueryable{`1},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`1,System.Object}},System.Threading.CancellationToken)">
            <inheritdoc cref="M:DevQuiz.Libraries.Data.Repositories.IGenericRepository`1.GetAllAsync(System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.GenericRepository`2.GetAllAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Func{System.Linq.IQueryable{`1},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`1,System.Object}},System.Threading.CancellationToken)">
            <inheritdoc cref="M:DevQuiz.Libraries.Data.Repositories.IGenericRepository`1.GetAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.GenericRepository`2.GetAllAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Func{System.Linq.IQueryable{`1},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`1,System.Object}},System.Func{System.Linq.IQueryable{`1},System.Linq.IOrderedQueryable{`1}},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc cref="M:DevQuiz.Libraries.Data.Repositories.IGenericRepository`1.GetAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.GenericRepository`2.GetAllAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Func{System.Linq.IQueryable{`1},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`1,System.Object}},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc cref="M:DevQuiz.Libraries.Data.Repositories.IGenericRepository`1.GetAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.GenericRepository`2.List">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Repositories.IGenericRepositoryBase`1.List"/>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.GenericRepository`2.List(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Repositories.IGenericRepositoryBase`1.List(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})"/>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.GenericRepository`2.List(System.Func{System.Linq.IQueryable{`1},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`1,System.Object}})">
            <inheritdoc cref="M:DevQuiz.Libraries.Data.Repositories.IGenericRepository`1.List(System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}})"/>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.GenericRepository`2.List(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Func{System.Linq.IQueryable{`1},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`1,System.Object}})">
            <inheritdoc cref="M:DevQuiz.Libraries.Data.Repositories.IGenericRepository`1.List(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}})"/>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.GenericRepository`2.List(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Func{System.Linq.IQueryable{`1},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`1,System.Object}},System.Func{System.Linq.IQueryable{`1},System.Linq.IOrderedQueryable{`1}},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc cref="M:DevQuiz.Libraries.Data.Repositories.IGenericRepository`1.List(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Nullable{System.Int32},System.Nullable{System.Int32})"/>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.GenericRepository`2.List(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Func{System.Linq.IQueryable{`1},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`1,System.Object}},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc cref="M:DevQuiz.Libraries.Data.Repositories.IGenericRepository`1.List(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})"/>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.GenericRepository`2.ListAsync">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Repositories.IGenericRepositoryBase`1.ListAsync"/>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.GenericRepository`2.ListAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Repositories.IGenericRepositoryBase`1.ListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})"/>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.GenericRepository`2.ListAsync(System.Func{System.Linq.IQueryable{`1},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`1,System.Object}},System.Threading.CancellationToken)">
            <inheritdoc cref="M:DevQuiz.Libraries.Data.Repositories.IGenericRepository`1.ListAsync(System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.GenericRepository`2.ListAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Func{System.Linq.IQueryable{`1},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`1,System.Object}},System.Threading.CancellationToken)">
            <inheritdoc cref="M:DevQuiz.Libraries.Data.Repositories.IGenericRepository`1.ListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.GenericRepository`2.ListAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Func{System.Linq.IQueryable{`1},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`1,System.Object}},System.Func{System.Linq.IQueryable{`1},System.Linq.IOrderedQueryable{`1}},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc cref="M:DevQuiz.Libraries.Data.Repositories.IGenericRepository`1.ListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.GenericRepository`2.ListAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Func{System.Linq.IQueryable{`1},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`1,System.Object}},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc cref="M:DevQuiz.Libraries.Data.Repositories.IGenericRepository`1.ListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.GenericRepository`2.Count">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Repositories.IGenericRepositoryBase`1.Count"/>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.GenericRepository`2.Count(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Repositories.IGenericRepositoryBase`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})"/>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.GenericRepository`2.Create(`1)">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Repositories.IGenericRepositoryBase`1.Create(`0)"/>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.GenericRepository`2.CreateAsync(`1,System.Threading.CancellationToken)">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Repositories.IGenericRepositoryBase`1.CreateAsync(`0,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.GenericRepository`2.Update(`1)">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Repositories.IGenericRepositoryBase`1.Update(`0)"/>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.GenericRepository`2.Delete(`1)">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Repositories.IGenericRepositoryBase`1.Delete(`0)"/>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.GenericRepository`2.Delete(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Repositories.IGenericRepositoryBase`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})"/>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.GenericRepository`2.GetOne(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Func{System.Linq.IQueryable{`1},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`1,System.Object}})">
            <inheritdoc cref="M:DevQuiz.Libraries.Data.Repositories.IGenericRepository`1.GetOne(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}})"/>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.GenericRepository`2.GetOneAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Func{System.Linq.IQueryable{`1},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`1,System.Object}},System.Threading.CancellationToken)">
            <inheritdoc cref="M:DevQuiz.Libraries.Data.Repositories.IGenericRepository`1.GetOneAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}},System.Threading.CancellationToken)"/>
        </member>
        <member name="T:DevQuiz.Libraries.Data.Repositories.IGenericRepository`1">
            <summary>
            Generic repository
            </summary>
            <typeparam name="TEntity">Type of entity</typeparam>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.IGenericRepository`1.GetAll(System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}})">
            <summary>
            Get all entities and included tables
            </summary>
            <param name="include">Tables to include</param>
            <returns>IQueryable collection of entities</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.IGenericRepository`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}})">
            <summary>
            Get all entities with filter and included tables
            </summary>
            <param name="predicate">Filter for entities</param>
            <param name="include">Tables to include</param>
            <returns>IQueryable collection of entities</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.IGenericRepository`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get all entities with filter order and paging and included tables
            </summary>
            <param name="predicate">Filter for entities</param>
            <param name="include">Tables to include</param>
            <param name="orderBy">Order by function</param>
            <param name="skip">Number of skip entities</param>
            <param name="take">Number of take entities</param>
            <returns>IQueryable collection of entities</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.IGenericRepository`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get all entities with filter order and paging and included tables
            </summary>
            <param name="predicate">Filter for entities</param>
            <param name="include">Tables to include</param>
            <param name="orderBy">Name of the field by which you want to sort</param>
            <param name="orderDirection">Order direction</param>
            <param name="skip">Number of skip entities</param>
            <param name="take">Number of take entities</param>
            <returns>IQueryable collection of entities</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.IGenericRepository`1.GetAllAsync(System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}},System.Threading.CancellationToken)">
            <summary>
            Get all entities and included tables
            </summary>
            <param name="include">Tables to include</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>IQueryable collection of entities</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.IGenericRepository`1.GetAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}},System.Threading.CancellationToken)">
            <summary>
            Get all entities and included tables
            </summary>
            <param name="predicate">Filter for entities</param>
            <param name="include">Tables to include</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>IQueryable collection of entities</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.IGenericRepository`1.GetAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get all entities with filter order and paging and included tables
            </summary>
            <param name="predicate">Filter for entities</param>
            <param name="include">Tables to include</param>
            <param name="orderBy">Order by function</param>
            <param name="skip">Number of skip entities</param>
            <param name="take">Number of take entities</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>IQueryable collection of entities</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.IGenericRepository`1.GetAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get all entities with filter order and paging and included tables
            </summary>
            <param name="predicate">Filter for entities</param>
            <param name="include">Tables to include</param>
            <param name="orderBy">Name of the field by which you want to sort</param>
            <param name="orderDirection">Order direction</param>
            <param name="skip">Number of skip entities</param>
            <param name="take">Number of take entities</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>IQueryable collection of entities</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.IGenericRepository`1.List(System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}})">
            <summary>
            Get all entities and included tables
            </summary>
            <param name="include">Tables to include</param>
            <returns>List of entities</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.IGenericRepository`1.List(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}})">
            <summary>
            Get all entities with filter and included tables
            </summary>
            <param name="predicate">Filter for entities</param>
            <param name="include">Tables to include</param>
            <returns>List of entities</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.IGenericRepository`1.List(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get all entities with filter order and paging and included tables
            </summary>
            <param name="predicate">Filter for entities</param>
            <param name="include">Tables to include</param>
            <param name="orderBy">Order by function</param>
            <param name="skip">Number of skip entities</param>
            <param name="take">Number of take entities</param>
            <returns>List of entities</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.IGenericRepository`1.List(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get all entities with filter order and paging and included tables
            </summary>
            <param name="predicate">Filter for entities</param>
            <param name="include">Tables to include</param>
            <param name="orderBy">Name of the field by which you want to sort</param>
            <param name="orderDirection">Order direction</param>
            <param name="skip">Number of skip entities</param>
            <param name="take">Number of take entities</param>
            <returns>List of entities</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.IGenericRepository`1.ListAsync(System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}},System.Threading.CancellationToken)">
            <summary>
            Get all entities and included tables
            </summary>
            <param name="include">Tables to include</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of entities</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.IGenericRepository`1.ListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}},System.Threading.CancellationToken)">
            <summary>
            Get all entities with filter and included tables
            </summary>
            <param name="predicate">Filter for entities</param>
            <param name="include">Tables to include</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of entities</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.IGenericRepository`1.ListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get all entities with filter order and paging and included tables
            </summary>
            <param name="predicate">Filter for entities</param>
            <param name="include">Tables to include</param>
            <param name="orderBy">Order by function</param>
            <param name="skip">Number of skip entities</param>
            <param name="take">Number of take entities</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of entities</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.IGenericRepository`1.ListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get all entities with filter order and paging and included tables
            </summary>
            <param name="predicate">Filter for entities</param>
            <param name="include">Tables to include</param>
            <param name="orderBy">Name of the field by which you want to sort</param>
            <param name="orderDirection">Order direction</param>
            <param name="skip">Number of skip entities</param>
            <param name="take">Number of take entities</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of entities</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.IGenericRepository`1.GetOne(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}})">
            <summary>
            Get one entity
            </summary>
            <param name="predicate">Filter for entities</param>
            <param name="include">Tables to include</param>
            <returns>One entity</returns>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.IGenericRepository`1.GetOneAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{`0,System.Object}},System.Threading.CancellationToken)">
            <summary>
            Get one entity
            </summary>
            <param name="predicate">Filter for entities</param>
            <param name="include">Tables to include</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>One entity</returns>
        </member>
        <member name="T:DevQuiz.Libraries.Data.Repositories.UnitOfWork`1">
            <inheritdoc cref="T:DevQuiz.Libraries.Core.Repositories.IUnitOfWork" />
        </member>
        <member name="P:DevQuiz.Libraries.Data.Repositories.UnitOfWork`1.UserRepository">
            <summary>
            User repository
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Data.Repositories.UnitOfWork`1.QuestionRepository">
            <summary>
            Question repository
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Data.Repositories.UnitOfWork`1.CategoryRepository">
            <summary>
            Category repository
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Data.Repositories.UnitOfWork`1.TagRepository">
            <summary>
            Tag repository
            </summary>
        </member>
        <member name="P:DevQuiz.Libraries.Data.Repositories.UnitOfWork`1.AnswerRepository">
            <summary>
            Answer repository
            </summary>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.UnitOfWork`1.#ctor(`0,DevQuiz.Libraries.Data.Repositories.IGenericRepository{DevQuiz.Libraries.Data.Models.User},DevQuiz.Libraries.Data.Repositories.IGenericRepository{DevQuiz.Libraries.Data.Models.Question},DevQuiz.Libraries.Data.Repositories.IGenericRepository{DevQuiz.Libraries.Data.Models.Category},DevQuiz.Libraries.Data.Repositories.IGenericRepository{DevQuiz.Libraries.Data.Models.Tag},DevQuiz.Libraries.Data.Repositories.IGenericRepository{DevQuiz.Libraries.Data.Models.Answer})">
            <summary>
            Constructor
            </summary>
            <param name="dbContext">TDbContext instance</param>
            <param name="userRepository">User repository instance</param>
            <param name="questionRepository">Question repository instance</param>
            <param name="categoryRepository">Category repository instance</param>
            <param name="tagRepository">Tag repository instance</param>
            <param name="answerRepository">Answer repository instance</param>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.UnitOfWork`1.Commit">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Repositories.IUnitOfWork.Commit" />
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.UnitOfWork`1.CommitAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Repositories.IUnitOfWork.CommitAsync(System.Threading.CancellationToken)" />
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.UnitOfWork`1.GetBaseRepository``1">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Repositories.IUnitOfWork.GetBaseRepository``1"/>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.UnitOfWork`1.GetRepository``2">
            <inheritdoc cref="M:DevQuiz.Libraries.Core.Repositories.IUnitOfWork.GetRepository``2"/>
        </member>
        <member name="M:DevQuiz.Libraries.Data.Repositories.UnitOfWork`1.Dispose">
            <summary>
            Dispose unit of work instance
            </summary>
        </member>
    </members>
</doc>
